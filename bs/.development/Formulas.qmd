---
format:
    html: 
       embed-resources: true
---

##  Basic formula with ~


```{r}
#| echo: false
library(knitr)
library(htmltools)
library(equatiomatic)

show <- function(formula, data) {
  model <- lm(formula, data = data)
  f <- data.frame(Formula = deparse(formula))
  data_table <- kable(data, format = "html", table.attr = "style='display: inline-block; vertical-align: top;'")
  formula_table <- kable(data.frame(Formula = f), format = "html", table.attr = "style='display: inline-block; vertical-align: top;'")
  model_table <- kable(broom::tidy(model), format = "html", table.attr = "style='display: inline-block; vertical-align: top;'")
  html_output <- tags$table(
    tags$tr(
      tags$td(HTML(data_table)),
      tags$td(HTML(formula_table)),
      tags$td(HTML(model_table))
    )
  )
  html_output
}

show_model <- function(f, data) {
  model_latex <- extract_eq(lm(f, data = data), wrap = TRUE)
  model <- data.frame(Model = model_latex)
  knitr::kable(model)
}
```

```{r}
#| echo: false
data <- data.frame(
  height = c(150, 160, 170, 180, 190),
  weight = c(50, 60, 70, 80, 90) + runif(5)
)
f <- formula(weight ~ height, data = data)
show_model(f, data)
show(f, data)
terms <- c(
  "(Intercept)" = "Baseline weight (predicted weight if size = 0)",
  "height" = "Effect of height on weight"
)
m <- lm(f, data = data) |> broom::tidy()
m$term <- terms[m$term]
names(m)[names(m) == "estimate"] <- "ßs"
names(m)[names(m) == "std.error"] <- "Standard error of ßs"
names(m)[names(m) == "statistic"] <- "t-statistic = ßs / Standard error of ßs"
knitr::kable(m)
```

##  Adding multiple predictors with +

- Add size and bedrooms as main effects
- A main effect means that the factor is modeled independently from other factors

```{r}
#| echo: false
data <- data.frame(
  price = c(200, 250, 300, 350, 400) + runif(5),
  size = c(1000, 1500, 2000, 2500, 3000),
  bedrooms = c(2, 3, 3, 4, 4)
)
f <- formula(price ~ size + bedrooms, data = data)
show_model(f, data)
show(f, data)
terms <- c(
  "(Intercept)" = "Baseline price (for size = 0, bedrooms = 0)",
  "size" = "Effect of size on price",
  "bedrooms" = "Effect of bedrooms on price"
)
m <- lm(f, data = data) |> broom::tidy()
m$term <- terms[m$term]
names(m)[names(m) == "estimate"] <- "ßs"
names(m)[names(m) == "std.error"] <- "Standard error of ßs"
names(m)[names(m) == "statistic"] <- "t-statistic = ßs / Standard error of ßs"
knitr::kable(m)
```
##  Model with main effects and interaction using *

```{r}
#| echo: false
data <- data.frame(
  yield = c(80, 55, 77, 56, 35, 40, 48, 53),
  fertilizer = factor(rep(c("High", "Low"), each = 4)),
  water = factor(rep(c("High", "Low"), times = 4))
)
f <- formula(yield ~ fertilizer * water, data = data)
show_model(f, data)
show(f, data)
terms <- c(
  "(Intercept)" = "Baseline Yield (fertilizer = high, water = high)",
  "fertilizerLow" = "Effect of Low Fertilizer on Yield relative to high Fertilizer",
  "waterLow" = "Effect of Low Water on Yield relative to High Water",
  "fertilizerLow:waterLow" = "Interaction between Low Fertilizer and Low Water.
   How do low fertilizer and low water affect yield in a way different from the main affects. If significant than the effect of fertilizer depends on level of water (or vice versa)"
)
m <- lm(f, data = data) |> broom::tidy()
m$term <- terms[m$term]
names(m)[names(m) == "estimate"] <- "ßs"
names(m)[names(m) == "std.error"] <- "Standard error of ßs"
names(m)[names(m) == "statistic"] <- "t-statistic = ßs / Standard error of ßs"
knitr::kable(m)
```
- This includes the main effects of fertilizer and water as well as their interaction.
- An interaction means that the effect of one predictor depends on the level of another predictor.

# Model with interaction only using :

```{r}
#| echo: false
data <- data.frame(
  yield = c(80, 55, 77, 56, 35, 40, 48, 53),
  fertilizer = factor(rep(c("High", "Low"), each = 4)),
  water = factor(rep(c("High", "Low"), times = 4))
)
f <-formula(yield ~ fertilizer + water + fertilizer : water, data = data)
show_model(f, data)
```
- see in the section before the model is the same it is only another way to express it

# Model with nested factors

```{r}
#| echo: false
data <- data.frame(
  school = rep(c("School1", "School2"), each = 6),
  class = rep(c("ClassA", "ClassB", "ClassC"), 4),
  test_score = c(75, 78, 80, 82, 76, 79, 70, 72, 74, 73, 71, 72)
)
f <- formula(test_score ~ school / class, data = data) # gets to school + school:class
show_model(f, data)
show(f, data)
terms <- c(
  "(Intercept)" = "Baseline test score for School1 in ClassA",
  "schoolSchool2" = "Effect of School2 on test score relative to School1",
   "schoolSchool1:classClassB" = "Interaction between School1 and ClassB",
  "schoolSchool2:classClassB" = "Interaction between School2 and ClassB on test score",
  "schoolSchool1:classClassC" = "Interaction between School1 and ClassC on test score",
  "schoolSchool2:classClassC" = "Interaction between School2 and ClassC on test score"
)
m <- lm(f, data = data) |> broom::tidy()
m$term <- terms[m$term]
names(m)[names(m) == "estimate"] <- "ßs"
names(m)[names(m) == "std.error"] <- "Standard error of ßs"
names(m)[names(m) == "statistic"] <- "t-statistic = ßs / Standard error of ßs"
knitr::kable(m)
```
- school represents the primary grouping factor
- class is nested within school, modeling different classes within each school
- The formula school / class allows us to see
  the effects of both school and class within each school on test_score

