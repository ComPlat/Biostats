[{"name":"server.R","content":"#options(shiny.port = 3838)\nlibrary(shiny)\nlibrary(DT)\nlibrary(httr)\nlibrary(agricolae)\nlibrary(ggplot2)\nlibrary(broom)\nlibrary(readxl)\nlibrary(openxlsx)\nlibrary(purrr)\nlibrary(RColorBrewer)\nlibrary(MTT)\nlibrary(openssl)\nlibrary(jose)\nlibrary(pheatmap)\nlibrary(png)\nlibrary(ggpmisc)\nlibrary(R6)\nlibrary(drc)\nlibrary(patchwork)\n\nupload <- function(path) {\n  req(is.character(path))\n  df <- NULL\n  df <- try( as.data.frame(read_excel(path, col_names = TRUE)), silent = TRUE)\n  if (class(df) == \"try-error\") {\n    # identify seperator\n    line <- readLines(path, n = 1)\n    semicolon <- grepl(\";\", line)\n    comma <- grepl(\",\", line)\n    tab <- grepl(\"\\t\", line)\n    seperator <- NULL\n    if (semicolon == TRUE) {\n      seperator <- \";\"\n    } else if (comma == TRUE) {\n      seperator <- \",\"\n    } else if (tab == TRUE) {\n      seperator <- \"\\t\"\n    } else {\n      return(\"error\")\n    }\n    df <- try(read.csv(path, header = TRUE, sep = seperator))\n    if (class(df) == \"try-error\") {\n      return(\"error\")\n    }\n  } else {\n    f <- function(x) {\n      options(warn = -1)\n      x <- as.numeric(x)\n      options(warn = 0)\n      x <- x[!is.na(x)]\n      length(x) > 0\n    }\n    check <- apply(df, 2, f)\n    conv <- function(a, b) {\n      if (a == TRUE) {\n        return(as.numeric(b))\n      }\n      return(b)\n    }\n    df <- Map(conv, check, df)\n    df <- data.frame(df)\n  }\n  return(df)\n}\n\nplotResult <- R6Class(\"plotResult\",\n                      public = list(\n                        obj = NULL,\n                        width = NULL,\n                        height = NULL,\n                        dpi = NULL,\n                        initialize = function(object, width = 10, height = 10, dpi = 300) {\n                          self$obj <- object\n                          self$width <- width\n                          self$height <- height\n                          self$dpi <- dpi\n                        }\n                      )\n)\n\nerrorClass <- R6Class(\"errorClass\",\n                      public = list(\n                        error_message = NULL,\n                        initialize = function(error_message = NULL) {\n                          self$error_message <- error_message\n                        },\n                        isNull = function() {\n                          if (is.null(self$error_message)) {\n                            return(TRUE)\n                          }\n                          return(FALSE)\n                        }\n                      )\n)\n\n\nplotting <- function(id, var, result, res, plot_res) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      plot_res <- reactiveValues(data = NULL)\n      \n      plotfct <- function(method) {\n        df <- var$df\n        req(df)\n        x <- NULL\n        y <- NULL\n        col <- \"\"\n        fill <- \"\"\n        fill_title <- \"\"\n        col_title <- \"\"\n        xlabel <- \"\"\n        ylabel <- \"\"\n        xtype <- NULL\n        theme <- NULL\n        theme_fill <- NULL\n        facet_mode <- NULL\n        facet <- NULL\n        fitMethod <- NULL\n        width <- input$widthPlot\n        height <- input$heightPlot\n        resolution <- input$resPlot\n        if(width <= 0) {\n          showNotification(paste(\"width has to be a positive number is changed to 10 cm\"), duration = 0)\n          width <- 10\n        }\n        if(height <= 0) {\n          showNotification(paste(\"height has to be a positive number is changed to 10 cm\"), duration = 0)\n          height <- 10\n        }\n        if(width > 100) {\n          showNotification(paste(\"width exceeds max value of 100 cm. Is set to 100 cm.\"), duration = 0)\n          width <- 100\n        }\n        if(height > 100) {\n          showNotification(paste(\"height exceeds max value of 100 cm. Is set to 100 cm.\"), duration = 0)\n          height <- 100\n        }\n        \n        if(method == \"box\") {\n          x <- input$xBox\n          y <- input$yBox\n          col <- input$colBox\n          fill <- input$fillBox\n          fill_title <- input$legendtitle_colBox\n          col_title <- input$legendtitle_fillBox\n          xlabel <- input$xaxis_textBox\n          ylabel <- input$yaxis_textBox\n          xtype <- input$xtypeBox\n          theme <- input$themeBox\n          theme_fill <- input$theme_fillBox\n          facet_mode <- input$facet_modeBox \n          facet <- input$facetBox\n        } else if(method == \"dot\") {\n          x <- input$xDot\n          y <- input$yDot\n          col <- input$colDot\n          col_title <- input$legendtitle_colDot\n          xlabel <- input$xaxis_textDot\n          ylabel <- input$yaxis_textDot\n          xtype <- input$xtypeDot\n          theme <- input$themeDot\n          facet_mode <- input$facet_modeDot\n          facet <- input$facetDot\n          fitMethod <- input$fitDot\n        } else if(method == \"line\") {\n          x <- input$xLine\n          y <- input$yLine\n          col <- input$colLine\n          col_title <- input$legendtitle_colLine\n          xlabel <- input$xaxis_textLine\n          ylabel <- input$yaxis_textLine\n          xtype <- input$xtypeLine\n          theme <- input$themeLine\n          facet_mode <- input$facet_modeLine\n          facet <- input$facetLine\n        }\n        if(is.null(x)) showNotification(\"please specify the X variable\", duration = 0)\n        if(is.null(y)) showNotification(\"please specify the Y variable\", duration = 0) \n        req(!is.null(x))\n        req(!is.null(y))\n        col_names <- names(df)\n        check_x <- x %in% col_names\n        check_y <- y %in% col_names\n        if(!check_x) showNotification(\"X variable not found\", duration = 0)\n        if(!check_y) showNotification(\"Y variable not found\", duration = 0) \n        req(check_x)\n        req(check_y)\n        if( !(fill %in% names(df)) && (fill != \"\") ) showNotification(\"fill variable not found\", duration = 0)\n        if( !(col %in% names(df)) && (fill != \"\") ) showNotification(\"colour variable not found\", duration = 0)\n        req( (fill %in% names(df)) || (fill == \"\") )\n        req( (col %in% names(df)) || (col == \"\") )\n        \n        xd <- NULL\n        if(xtype == \"numeric\") {\n          xd <- as.numeric(df[,x])\n        } else {\n          xd <- as.factor(df[,x])\n        }\n        yd <- as.numeric(df[,y])\n        \n        if(fitMethod != \"none\" && !is.null(fitMethod) && xtype != \"numeric\") {\n          #fitMethod <- \"none\"\n          showNotification(\"Fit method will be ignored as X variable is not numerical\", duration = 0)\n        }\n        pfct <- function() {\n          if( (fill == \"\") && (col == \"\")) {\n            p <- ggplot(data = df, aes(x = xd, y = yd)) +\n              ylab(ylabel) +\n              xlab(xlabel)  \n          } else if((fill != \"\") && (col != \"\") ) {\n            p <- ggplot(data = df,\n                        aes(x = xd, y = yd,\n                            fill = df[,fill], color = df[,col]) ) +\n              ylab(ylabel) +\n              xlab(xlabel) +\n              guides(fill = guide_legend(title = fill_title), col = guide_legend(title = col_title))       \n          } else if( (fill != \"\") && (col == \"\") ) {\n            p <- ggplot(data = df,\n                        aes(x = xd, y = yd,\n                            fill = df[,fill]) ) +\n              ylab(ylabel) +\n              xlab(xlabel) +\n              guides(fill = guide_legend(title = fill_title) )\n          } else if( (fill == \"\") && (col != \"\") ) {\n            p <- ggplot(data = df,\n                        aes(x = xd, y = yd,\n                            color = df[,col]) ) +\n              ylab(ylabel) +\n              xlab(xlabel) +\n              guides(col = guide_legend(title = col_title) )\n          }\n          if(method == \"box\") {\n            p <- p +\n              scale_color_brewer(palette = theme) +\n              scale_fill_brewer(palette = theme_fill)\n            p <- p + geom_boxplot()\n          } else if(method == \"dot\") {\n            p <- p +\n              scale_color_brewer(palette = theme) \n            p <- p + geom_point() +   geom_smooth(method = fitMethod) \n            if(fitMethod != \"\" && !is.null(fitMethod) && fitMethod != \"none\") p <- p + stat_poly_eq(ggpmisc::use_label(c(\"eq\", \"n\", \"R2\", \"p\", \"F\"))) \n          } else if(method == \"line\") {\n            p <- p +\n              scale_color_brewer(palette = theme) \n            p <- p + geom_line()\n          }  \n          if(facet_mode == \"facet_wrap\") {\n            p <- p + facet_wrap(~ df[,facet], scales = \"free\")\n          } else if(facet_mode == \"facet_grid\") {\n            p <- p + facet_grid(. ~  df[,facet], scales = \"free\")\n          }\n          \n          return(p)\n        }\n        p <- tryCatch({\n          p <- pfct()\n        }, \n        warning = function(warn) {\n          showNotification(paste(\"A warning occurred: \", conditionMessage(warn)), duration = 0)\n        }, \n        error = function(err) {\n          showNotification(paste(\"An error occurred: \", conditionMessage(err)), duration = 0)\n        })\n        result$d <- plotResult$new(p, width, height, resolution)\n        plot_res$data <- p\n        result$curr_name <- paste(\"Plot Nr\", length(result$names) + 1,  paste(\"Type: \", method))\n        output$plot_res <- renderPlot(p)\n      }\n      \n      observeEvent(input$boxplot, {\n        plotfct(\"box\")\n      })\n      \n      observeEvent(input$dotplot, {\n        plotfct(\"dot\")\n      })\n      \n      observeEvent(input$lineplot, {\n        plotfct(\"line\")\n      })\n      \n      output$plot_result <- renderPlot({\n        plot_res$data\n      })\n      \n      \n    }\n  )\n}\n\n\n\n\n\n\nserver <- function(input, output, session) {\n  # -------------------------------------------------------------------------------------------------------\n  # 1. download data from ELN and load into shiny\n  # -------------------------------------------------------------------------------------------------------\n  var <- reactiveValues(\n    df = NULL, token = NULL,\n    url = NULL, id = NULL,\n    type = NULL, ip = NULL,\n    filename_user = NULL\n  )\n\n  output$dat1 <- renderDT({\n    showNotification(\"test1\", duration = 0)\n    req(input$upload)\n    showNotification(\"test2\", duration = 0)\n    showNotification(input$upload$datapath, duration = 0)\n    df <- upload(input$upload$datapath) \n    if (is.data.frame(df)) {\n      var$df <- df\n    } else {\n      showNotification(\"File can not be used. Upload into R failed!\", duration = 0)\n    }\n  })\n\n  # -------------------------------------------------------------------------------------------------------\n  # 2. modify dependent variable\n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(input$mod, {\n    dat <- var$df\n    op <- input$op\n    new_mod <- input$new_mod\n    req(op)\n    req(new_mod)\n    req(dat)\n    new <- NULL\n    err <- NULL\n    e <- try({\n      ast <- get_ast(str2lang(op))\n      ast <- ast[[length(ast)]]\n    })\n    if (inherits(e, \"try-error\")) {\n      err <- conditionMessage(attr(e, \"condition\"))\n      return()\n    }\n    if (ast == \"Error\") {\n      showNotification(\"Unallowed function found\")\n    } else {\n      e <- try(\n        new <- with(dat, eval(parse(text = op)))\n      )\n      if (inherits(e, \"try-error\")) {\n        err <- conditionMessage(attr(e, \"condition\"))\n      }\n      var$df[, new_mod] <- new\n      output$dat1 <- renderDT(var$df)\n      output$mod_error <- renderText(err)\n    }\n  })\n\n  # -------------------------------------------------------------------------------------------------------\n  # 3. Save results in file and download it  \n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(checker$check, {\n    output$download()\n    checker$check <- NULL\n    checker$file <- NULL\n  })\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 4. statistical methods\n  # -------------------------------------------------------------------------------------------------------\n  # variable which saves result of calculation\n  res <- reactiveValues(data = NULL)\n\n  # variable which is used to store all results\n  result <- reactiveValues(d = NULL, saved = NULL, names = NULL, curr_name = NULL)\n\n  # upload result to ELN in correlation tab\n  checker <- reactiveValues(check = NULL, file = NULL)\n\n  saving <- function(indices) {\n    if (length(indices) == 0) {\n      showNotification(\"Nothing to upload\")\n      return(NULL)\n    }\n\n    plot_files <- new.env()\n    content <- function(indices) {\n      l <- list()\n      counter <- 1\n      for (i in indices) {\n        l[[counter]] <- result$saved[[i]]\n        counter <- counter + 1\n      }\n      if (length(l) == 0) {\n        return(NULL)\n      }\n      return(l)\n    }\n\n    l <- content(indices)\n    return(l)\n  }\n\n  # -------------------------------------------------------------------------------------------------------\n  # 4.1 correlations\n  # -------------------------------------------------------------------------------------------------------\n  # save results\n  observeEvent(input$corr_save, {\n    result$saved[[length(result$saved) + 1]] <- result$d\n    result$names[[length(result$names) + 1]] <- result$curr_name\n    updateCheckboxGroupInput(session, \"TableSaved5\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved2\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved3\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved4\", choices = result$names)\n  })\n\n  # send already saved results in file\n  observeEvent(input$corr_upload, {\n    indices <- match(input$TableSaved, result$names)\n    var$filename_user <- input$corr_file_name\n    saving(indices)\n    js$closewindow()\n  })\n\n  output$download_corr <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    \n    content = function(file) {\n      plot_files <- new.env()\n      indices <- match(input$TableSaved, result$names)\n      l <- saving(indices)\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      curr_row <- 1\n      \n      for (i in seq_along(l)) {\n        curr_val <- l[[i]]\n        if (class(curr_val)[1] != \"plotResult\") {\n          writeData(wb, \"Results\", curr_val, startRow = curr_row)\n          curr_row <- curr_row + dim(curr_val)[1] + 5\n        } else { \n          tempfile_plot <- tempfile(fileext = \".png\")\n          ggsave(tempfile_plot,\n                 plot = curr_val$obj,\n                 width = curr_val$width, height = curr_val$height,\n                 dpi = curr_val$dpi, device = \"jpeg\", units = \"cm\"\n          )\n          insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n          curr_row <- curr_row + curr_val$height + 20\n          plot_files$files <- c(plot_files, tempfile_plot)\n        }\n      }\n      openxlsx::saveWorkbook(wb, file)\n    }\n    \n  )\n\n  corr_fct <- function(method) {\n    dep1 <- input$indep3\n    req(dep1)\n    dep2 <- input$dep3\n    req(dep2)\n    df <- var$df\n    req(df)\n\n    fit <- NULL\n    err <- NULL\n\n    e <- try(\n      fit <- broom::tidy(cor.test(df[, dep1], df[, dep2], method = method, alternative = input$alt0, conf.level = input$conflevel0))\n    )\n    if (inherits(e, \"try-error\")) {\n      err <- conditionMessage(attr(e, \"condition\"))\n    }\n\n    res$data <- renderTable(fit, digits = 6)\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"Conducted test: \", method)\n    output$cor_result <- renderTable(fit, digits = 6)\n    output$cor_error <- renderText(err)\n  }\n\n  # pearson\n  observeEvent(input$pear, {\n    corr_fct(\"pearson\")\n  })\n\n  output$cor_result <- renderTable(\n    {\n      res$data\n    },\n    digits = 6\n  )\n\n  # spearman\n  observeEvent(input$spear, {\n    corr_fct(\"spearman\")\n  })\n\n  output$cor_result <- renderTable(\n    {\n      res$data\n    },\n    digits = 6\n  )\n\n  # kendall\n  observeEvent(input$kendall, {\n    corr_fct(\"kendall\")\n  })\n\n  output$cor_result <- renderTable(\n    {\n      res$data\n    },\n    digits = 6\n  )\n\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 5. plotting\n  # -------------------------------------------------------------------------------------------------------\n  plotting(\"plotting\", var, result, res, plot_res)\n\n  # save results\n  observeEvent(input$plot_save, {\n    result$saved[[length(result$saved) + 1]] <- result$d\n    result$names[[length(result$names) + 1]] <- result$curr_name\n    updateCheckboxGroupInput(session, \"TableSaved5\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved3\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved2\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved4\", choices = result$names)\n  })\n\n  # send already saved results in file\n  observeEvent(input$plot_upload, {\n    indices <- match(input$TableSaved2, result$names)\n    var$filename_user <- input$plot_file_name\n    saving(indices)\n    js$closewindow()\n  })\n  \n  output$download_plot <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    \n    content = function(file) {\n      plot_files <- new.env()\n      indices <- match(input$TableSaved2, result$names)\n      l <- saving(indices)\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      curr_row <- 1\n      \n      for (i in seq_along(l)) {\n        curr_val <- l[[i]]\n        if (class(curr_val)[1] != \"plotResult\") {\n          writeData(wb, \"Results\", curr_val, startRow = curr_row)\n          curr_row <- curr_row + dim(curr_val)[1] + 5\n        } else { \n          tempfile_plot <- tempfile(fileext = \".png\")\n          ggsave(tempfile_plot,\n                 plot = curr_val$obj,\n                 width = curr_val$width, height = curr_val$height,\n                 dpi = curr_val$dpi, device = \"jpeg\", units = \"cm\"\n          )\n          insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n          curr_row <- curr_row + curr_val$height + 20\n          plot_files$files <- c(plot_files, tempfile_plot)\n        }\n      }\n      openxlsx::saveWorkbook(wb, file)\n    }\n    \n  )\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 6. Assumptions\n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(input$ass_save, {\n    result$saved[[length(result$saved) + 1]] <- result$d\n    result$names[[length(result$names) + 1]] <- result$curr_name\n    updateCheckboxGroupInput(session, \"TableSaved5\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved3\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved2\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved4\", choices = result$names)\n  })\n\n  # send already saved results in file\n  observeEvent(input$ass_upload, {\n    indices <- match(input$TableSaved3, result$names)\n    var$filename_user <- input$ass_file_name\n    saving(indices)\n    js$closewindow()\n  })\n  \n  output$download_ass <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    \n    content = function(file) {\n      plot_files <- new.env()\n      indices <- match(input$TableSaved3, result$names)\n      l <- saving(indices)\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      curr_row <- 1\n      \n      for (i in seq_along(l)) {\n        curr_val <- l[[i]]\n        if (class(curr_val)[1] != \"plotResult\") {\n          writeData(wb, \"Results\", curr_val, startRow = curr_row)\n          curr_row <- curr_row + dim(curr_val)[1] + 5\n        } else { \n          tempfile_plot <- tempfile(fileext = \".png\")\n          ggsave(tempfile_plot,\n                 plot = curr_val$obj,\n                 width = curr_val$width, height = curr_val$height,\n                 dpi = curr_val$dpi, device = \"jpeg\", units = \"cm\"\n          )\n          insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n          curr_row <- curr_row + curr_val$height + 20\n          plot_files$files <- c(plot_files, tempfile_plot)\n        }\n      }\n      openxlsx::saveWorkbook(wb, file)\n    }\n    \n  )\n\n  as_res <- reactiveValues(data = NULL)\n  # -------------------------------------------------------------------------------------------------------\n  # 6.1 normal distribution\n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(input$shap, {\n    correct_name <- function(name, df) {\n      name %in% names(df)\n    }\n\n    change_char_input <- function(chars) {\n      nams <- unlist(strsplit(chars, split = \",\"))\n      for (i in 1:length(nams)) {\n        nams[i] <- gsub(\" \", \"\", nams[i])\n      }\n      nams\n    }\n\n    combine <- function(new, vec, df, first) {\n      if (length(vec) == 0) {\n        return(new)\n      }\n\n      if (correct_name(vec[length(vec)], df)) {\n        if (isTRUE(first)) {\n          new <- df[, vec[length(vec)]]\n          first <- FALSE\n        } else {\n          new <- interaction(new, df[, vec[length(vec)]])\n        }\n      }\n\n      vec <- vec[-length(vec)]\n      combine(new, vec, df, first)\n    }\n\n    indep <- input$indep4\n    req(indep)\n    dep <- input$dep4\n    req(dep)\n    dat <- var$df\n    req(dat)\n    vec <- change_char_input(input$indep4)\n    new <- rep(\"\", dim(dat)[1])\n    first <- TRUE\n    new <- combine(new, vec, dat, first)\n\n    groups <- unique(new)\n\n    check <- TRUE\n    res <- NULL\n    if (length(groups) == 1) {\n      if (groups == \"\") {\n        output$as_error <- renderText(\"Something went wrong. Probably not found independent variable(s)\")\n        check <- FALSE\n      }\n    }\n\n    if (isTRUE(check)) {\n      res <- list()\n      for (i in groups) {\n        posis <- new == i\n        temp_dat <- dat[posis, ]\n\n        temp <- NULL\n        err <- NULL\n\n        e <- try(\n          temp <- broom::tidy(shapiro.test(temp_dat[, dep]))\n        )\n        if (inherits(e, \"try-error\")) {\n          err <- conditionMessage(attr(e, \"condition\"))\n        }\n        output$as_error <- renderText(err)\n\n        if (!is.null(temp)) {\n          temp$variable <- i\n          res[[length(res) + 1]] <- temp\n        }\n      }\n\n      res <- do.call(rbind, res)\n    }\n\n    result$d <- res\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"normal distribution (shapiro)\")\n\n    output$as_result <- renderTable(res, digits = 6)\n  })\n\n  output$as_result <- renderTable(\n    {\n      as_res$data\n    },\n    digits = 6\n  )\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 6.2 variance homogenity\n  # -------------------------------------------------------------------------------------------------------\n  as_res <- reactiveValues(data = NULL)\n\n  observeEvent(input$leve, {\n    indep <- input$indep4\n    req(indep)\n    dep <- input$dep4\n    req(dep)\n\n    formula <- NULL\n    err <- NULL\n    fit <- NULL\n\n    e <- try(\n      formula <- as.formula(paste(dep, \"~\", indep))\n    )\n    if (inherits(e, \"try-error\")) {\n      err <- conditionMessage(attr(e, \"condition\"))\n    }\n\n\n    if (is.null(err)) {\n      df <- var$df\n      req(df)\n\n      e <- try(\n        fit <- broom::tidy(car::leveneTest(formula, data = df, center = input$center))\n      )\n      if (inherits(e, \"try-error\")) {\n        err <- conditionMessage(attr(e, \"condition\"))\n      }\n    }\n\n    as_res$data <- renderTable(fit, digits = 6)\n    output$as_result <- renderTable(fit, digits = 6)\n    output$as_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"variance homogenity (levene)\")\n  })\n\n  output$as_result <- renderTable(\n    {\n      as_res$data\n    },\n    digits = 6\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7 Statistical tests\n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(input$tests_save, {\n    result$saved[[length(result$saved) + 1]] <- result$d\n    result$names[[length(result$names) + 1]] <- result$curr_name\n    updateCheckboxGroupInput(session, \"TableSaved5\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved4\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved3\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved2\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved\", choices = result$names)\n  })\n\n\n  # send already saved results in file\n  observeEvent(input$tests_upload, {\n    indices <- match(input$TableSaved4, result$names)\n    var$filename_user <- input$tests_file_name\n    saving(indices)\n    js$closewindow()\n  })\n  \n  output$download_tests <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    \n    content = function(file) {\n      plot_files <- new.env()\n      indices <- match(input$TableSaved4, result$names)\n      l <- saving(indices)\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      curr_row <- 1\n      \n      for (i in seq_along(l)) {\n        curr_val <- l[[i]]\n        if (class(curr_val)[1] != \"plotResult\") {\n          writeData(wb, \"Results\", curr_val, startRow = curr_row)\n          curr_row <- curr_row + dim(curr_val)[1] + 5\n        } else { \n          tempfile_plot <- tempfile(fileext = \".png\")\n          ggsave(tempfile_plot,\n                 plot = curr_val$obj,\n                 width = curr_val$width, height = curr_val$height,\n                 dpi = curr_val$dpi, device = \"jpeg\", units = \"cm\"\n          )\n          insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n          curr_row <- curr_row + curr_val$height + 20\n          plot_files$files <- c(plot_files, tempfile_plot)\n        }\n      }\n      openxlsx::saveWorkbook(wb, file)\n    }\n    \n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.1 t-test\n  # -------------------------------------------------------------------------------------------------------\n  tests_res <- reactiveValues(data = NULL)\n\n  observeEvent(input$ttest, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n\n    formula <- NULL\n    err <- NULL\n    fit <- NULL\n\n    e <- try(\n      formula <- as.formula(paste(dep, \"~\", indep))\n    )\n    if (inherits(e, \"try-error\")) {\n      err <- conditionMessage(attr(e, \"condition\"))\n    }\n\n    paired <- FALSE\n    if (input$paired == \"p\") {\n      paired <- TRUE\n    }\n\n    eq <- TRUE\n    if (input$vareq == \"noeq\") {\n      eq <- FALSE\n    }\n\n    if (is.null(err)) {\n      df <- var$df\n      req(df)\n\n      e <- try(\n        fit <- broom::tidy(t.test(formula,\n          data = df, conf.level = input$conflevel,\n          alternative = input$alt, paired = paired, var.equal = eq\n        ))\n      )\n      if (inherits(e, \"try-error\")) {\n        err <- conditionMessage(attr(e, \"condition\"))\n      }\n    }\n\n\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"t-test or Welch-test\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tt_res$data\n    },\n    digits = 6\n  )\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.2 aov\n  # -------------------------------------------------------------------------------------------------------\n  conduct_test <- function(method, indep, dep) {\n    formula <- NULL\n    err <- NULL\n    fit <- NULL\n\n    e <- try(\n      formula <- as.formula(paste(dep, \"~\", indep))\n    )\n    if (inherits(e, \"try-error\")) {\n      err <- conditionMessage(attr(e, \"condition\"))\n    }\n\n    if (is.null(err)) {\n      df <- var$df\n      req(df)\n\n      e <- try({\n        switch(method,\n          aov = {\n            fit <- broom::tidy(aov(formula, data = df))\n          },\n          kruskal = {\n            fit <- broom::tidy(kruskal.test(formula, data = df))\n          },\n          HSD = {\n            aov_res <- aov(formula, data = df)\n            bal <- input$bvsub\n            req(bal)\n            if (bal == \"Balanced\") {\n              bal <- TRUE\n            } else {\n              bal <- FALSE\n            }\n            fit <- agricolae::HSD.test(aov_res,\n              trt = indep,\n              alpha = input$pval, group = TRUE, unbalanced = bal\n            )$groups\n          },\n          kruskal_test = {\n            fit <- with(df, kruskal(df[, dep], df[, indep]),\n              alpha = input$pval, p.adj = input$padj, group = TRUE\n            )$groups\n          },\n          LSD = {\n            aov_res <- aov(formula, data = df)\n            fit <- agricolae::LSD.test(aov_res,\n              trt = indep,\n              alpha = input$pval, p.adj = input$padj, group = TRUE\n            )$groups\n          },\n          scheffe = {\n            aov_res <- aov(formula, data = df)\n            fit <- agricolae::scheffe.test(aov_res, trt = indep, alpha = input$pval, group = TRUE)$groups\n          },\n          REGW = {\n            aov_res <- aov(formula, data = df)\n            fit <- agricolae::REGW.test(aov_res, trt = indep, alpha = input$pval, group = TRUE)$groups\n          }\n        )\n      })\n      if (inherits(e, \"try-error\")) {\n        err <- conditionMessage(attr(e, \"condition\"))\n        return(err)\n      }\n    }\n\n    return(fit)\n  }\n\n  observeEvent(input$aov, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"aov\", indep, dep)\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"Analysis of variance (AOV)\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.3 kruskal wallis\n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(input$kw, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"kruskal\", indep, dep)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"Kruskal-Wallis\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.4 tukey HSD\n  # -------------------------------------------------------------------------------------------------------\n  tests_res <- reactiveValues(data = NULL)\n  observeEvent(input$tuk, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"HSD\", indep, dep)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"TukeyHSD\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.5 kruskal test\n  # -------------------------------------------------------------------------------------------------------\n  tests_res <- reactiveValues(data = NULL)\n  observeEvent(input$kwposthoc, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"kruskal_test\", indep, dep)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"Kurskal-Wallis PostHoc test\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.6 LSD test\n  # -------------------------------------------------------------------------------------------------------\n  tests_res <- reactiveValues(data = NULL)\n  observeEvent(input$lsd, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"LSD\", indep, dep)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"LSD\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.7 Scheffe test\n  # -------------------------------------------------------------------------------------------------------\n  tests_res <- reactiveValues(data = NULL)\n  observeEvent(input$scheffe, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"scheffe\", indep, dep)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"Scheffe\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n  # -------------------------------------------------------------------------------------------------------\n  # 7.8 REGW test\n  # -------------------------------------------------------------------------------------------------------\n  tests_res <- reactiveValues(data = NULL)\n  observeEvent(input$regw, {\n    indep <- input$indep6\n    req(indep)\n    dep <- input$dep6\n    req(dep)\n    fit <- conduct_test(\"REGW\", indep, dep)\n    err <- NULL\n    if (inherits(fit, \"try-error\")) {\n      err <- conditionMessage(attr(fit, \"condition\"))\n    }\n    tests_res$data <- renderTable(fit, digits = 6)\n    output$tests_result <- renderTable(fit, digits = 6)\n    output$tests_error <- renderText(err)\n\n    result$d <- fit\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"REGW\")\n  })\n\n  output$tests_result <- renderTable(\n    {\n      tests_res$data\n    },\n    digits = 6\n  )\n\n\n\n\n\n\n\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 8 calculation LC50\n  # -------------------------------------------------------------------------------------------------------\n  observeEvent(input$lc50_save, {\n    result$saved[[length(result$saved) + 1]] <- result$d\n    result$names[[length(result$names) + 1]] <- result$curr_name\n    updateCheckboxGroupInput(session, \"TableSaved5\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved4\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved3\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved2\", choices = result$names)\n    updateCheckboxGroupInput(session, \"TableSaved\", choices = result$names)\n  })\n\n\n  # send already saved results in file\n  observeEvent(input$lc50_upload, {\n    indices <- match(input$TableSaved5, result$names)\n    var$filename_user <- input$lc50_file_name\n    saving(indices)\n    js$closewindow()\n  })\n  \n  output$download_lc50 <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    \n    content = function(file) {\n      plot_files <- new.env()\n      indices <- match(input$TableSaved5, result$names)\n      l <- saving(indices)\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      curr_row <- 1\n      \n      for (i in seq_along(l)) {\n        curr_val <- l[[i]]\n        if (class(curr_val)[1] != \"plotResult\") {\n          writeData(wb, \"Results\", curr_val, startRow = curr_row)\n          curr_row <- curr_row + dim(curr_val)[1] + 5\n        } else { \n          tempfile_plot <- tempfile(fileext = \".png\")\n          ggsave(tempfile_plot,\n                 plot = curr_val$obj,\n                 width = curr_val$width, height = curr_val$height,\n                 dpi = curr_val$dpi, device = \"jpeg\", units = \"cm\"\n          )\n          insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n          curr_row <- curr_row + curr_val$height + 20\n          plot_files$files <- c(plot_files, tempfile_plot)\n        }\n      }\n      openxlsx::saveWorkbook(wb, file)\n    }\n    \n  )\n\n  lc50_res <- reactiveValues(data = NULL, plot_final = NULL)\n\n  lc50_fct <- function(plotting = FALSE) {\n    df <- var$df\n    req(df)\n    abs <- input$abs\n    req(abs)\n    conc <- input$conc\n    req(conc)\n    names <- input$names\n    req(names)\n    negative_identifier <- input$negative_identifier\n    req(negative_identifier)\n    positive_identifier <- input$positive_identifier\n    req(positive_identifier)\n    if ( any(is.na(df[, conc])) ) {\n      showNotification(\"Found NAs in conc column\", duration = 0)\n    }\n    req(!any(is.na(df[, conc])))\n    res <- try(MTT::ic50(df, abs, conc, names, negative_identifier, positive_identifier))\n    err <- NULL\n    if (inherits(res, \"try-error\")) {\n      err <- conditionMessage(attr(res, \"condition\"))\n      showNotification(\"Error during calculation of IC50.\", duration = 0)\n      return()\n    }\n\n    if (is(res, \"errorClass\")) {\n      showNotification(res$error_message, duration = 0)\n      return()\n    }\n\n    data <- list()\n    for (i in seq_along(res)) {\n      if (is(res[[i]], \"errorClass\")) {\n        showNotification(res[[i]]$error_message, duration = 0)\n        data[[i]] <- data.frame(\n          name = NA, Response_lowestdose_predicted = NA,\n          Response_highestdose_predicted = NA,\n          HillCoefficient = NA,\n          asymptote_one = NA, asymptote_two = NA,\n          IC50_relative = NA, IC50_relative_lower = NA,\n          IC50_relative_higher = NA, pIC50 = NA,\n          RSE = NA, p_value = NA, Problems = result[[i]][[1]]$error_message\n        )\n      } else {\n        data[[i]] <- res[[i]][[1]]\n      }\n    }\n    data <- do.call(rbind, data)\n\n    if (!plotting) {\n      result$d <- data\n      result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"LC50\")\n      lc50_res$data <- data\n      return()\n    }\n\n    plots <- list()\n    for (i in seq_along(res)) {\n      if (is(res[[i]], \"errorClass\")) {\n        showNotification(res[[i]]$error_message, duration = 0)\n        plots[[i]] <- ggplot()\n      } else {\n        plots[[i]] <- res[[i]][[2]]\n      }\n    }\n    plot_final <- plots[[1]]\n    if (length(plots) >= 2) {\n      for (i in 2:length(plots)) {\n        plot_final <- plot_final + plots[[i]]\n      }\n    }\n\n    result$d <- plotResult$new(plot_final, 25, 25, 300)\n    result$curr_name <- paste(\"Test Nr\", length(result$names) + 1, \"LC50 plot\")\n    lc50_res$plot_final <- plot_final\n  }\n\n  observeEvent(input$lc50, {\n    lc50_fct(FALSE)\n  })\n\n  output$lc50_result <- renderDT({\n    lc50_res$data\n  })\n\n\n  observeEvent(input$lc50Plot, {\n    lc50_fct(TRUE)\n  })\n\n  output$lc50_plot <- renderPlot({\n    lc50_res$plot_final\n  })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  # -------------------------------------------------------------------------------------------------------\n  # 9 Examples\n  # -------------------------------------------------------------------------------------------------------\n  output$allowed_functions <- renderTable({\n    df <- data.frame(\n      functions = c(\"-\", \"+\", \"*\", \"/\", \"log\", \"log10\", \"sqrt\", \"exp\", \"^\", \"sin\", \"cos\", \"tan\", \"tanh\", \"sinh\", \"cosh\", \"acos\", \"asin\", \"atan\", \"is.numeric\"),\n      functions = c(\"is.character\", \"is.logical\", \"is.factor\", \"is.integer\", \"as.numeric\", \"as.character\", \"as.logical\", \"as.factor\", \"as.integer\", \">\", \"<\", \"<=\", \">=\", \"==\", \"!=\", \"abs\", \"ceiling\", \"floor\", \"trunc\"),\n      functions = c(\"round\", \"grep\", \"substr\", \"sub\", \"paste\", \"paste0\", \"strsplit\", \"tolower\", \"toupper\", \"dnorm\", \"pnorm\", \"qnorm\", \"rnorm\", \"dbinom\", \"pbinom\", \"qbinom\", \"rbinom\", \"dpois\", \"ppois\"),\n      functions = c(\"rpois\", \"dunif\", \"punif\", \"qunif\", \"runif\", \"mean\", \"sd\", \"median\", \"quantile\", \"range\", \"sum\", \"diff\", \"min\", \"max\", \"scale\", \"c\", \"vector\", \"length\", \"matrix\")\n    )\n  })\n\n  output$example_csv <- renderTable({\n    head(CO2, n = 3)\n  })\n\n  output$example_cortest <- renderTable({\n    broom::tidy(cor.test(CO2$conc, CO2$uptake, data = CO2))\n  })\n\n  output$example_levene <- renderTable({\n    broom::tidy(car::leveneTest(CO2$uptake ~ CO2$Plant, data = CO2))\n  })\n\n\n  output$example_shapiro <- renderTable({\n    correct_name <- function(name, df) {\n      name %in% names(df)\n    }\n\n    change_char_input <- function(chars) {\n      nams <- unlist(strsplit(chars, split = \",\"))\n      for (i in 1:length(nams)) {\n        nams[i] <- gsub(\" \", \"\", nams[i])\n      }\n      nams\n    }\n\n    combine <- function(new, vec, df, first) {\n      if (length(vec) == 0) {\n        return(new)\n      }\n\n      if (correct_name(vec[length(vec)], df)) {\n        if (isTRUE(first)) {\n          new <- df[, vec[length(vec)]]\n          first <- FALSE\n        } else {\n          new <- interaction(new, df[, vec[length(vec)]])\n        }\n      }\n\n      vec <- vec[-length(vec)]\n      combine(new, vec, df, first)\n    }\n\n    indep <- \"Plant, Type\"\n    dep <- \"uptake\"\n    dat <- datasets::CO2\n    vec <- change_char_input(indep)\n    new <- rep(\"\", dim(dat)[1])\n    first <- TRUE\n    new <- combine(new, vec, dat, first)\n\n    groups <- unique(new)\n\n    check <- TRUE\n    res <- NULL\n\n    if (isTRUE(check)) {\n      res <- list()\n      for (i in groups) {\n        posis <- new == i\n        temp_dat <- dat[posis, ]\n\n        temp <- NULL\n        err <- NULL\n\n        e <- try(\n          temp <- broom::tidy(shapiro.test(temp_dat[, dep]))\n        )\n        if (inherits(e, \"try-error\")) {\n          err <- conditionMessage(attr(e, \"condition\"))\n        }\n        output$as_error <- renderText(err)\n\n        if (!is.null(temp)) {\n          temp$variable <- i\n          res[[length(res) + 1]] <- temp\n        }\n      }\n\n      res <- do.call(rbind, res)\n    }\n\n    res\n  })\n\n\n  output$example_ttest <- renderTable({\n    broom::tidy(t.test(uptake ~ Type, data = CO2))\n  })\n\n\n  output$example_aov <- renderTable({\n    broom::tidy(aov(uptake ~ Treatment * Type, data = CO2))\n  })\n\n  output$example_tukey <- renderTable({\n    fit <- aov(uptake ~ Plant, data = CO2)\n    res <- agricolae::HSD.test(fit,\n      trt = \"Plant\",\n      alpha = 0.05, group = TRUE, unbalanced = FALSE\n    )$groups\n\n    res[, 1] <- row.names(res)\n    res\n  })\n\n  output$example_plot <- renderPlot({\n    p <- ggplot() +\n      geom_boxplot(data = CO2, aes(\n        x = Plant, y = uptake, fill = Treatment\n      ))\n    print(p)\n  })\n} # end server\n","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(shinydashboard)\nlibrary(shinyWidgets)\nlibrary(shinyjs)\n\njsCode <- '\nshinyjs.closewindow = function() { \n  //top.window.close();\n}'\n\nplotting <- function(id) {\n  ns <- NS(id)\n  tabItem(\n    tabName = \"Visualisation\",\n    fluidRow(\n      tabBox(\n        tabPanel(\n          \"Boxplots\",\n          box(\n            textInput(ns(\"yBox\"), \"Y variable\", value = \"y\"),\n            textInput(ns(\"xBox\"), \"X variable\", value = \"x\"),\n            radioButtons(ns(\"xtypeBox\"), \"Type of x\",\n                         choices = c(\n                           factor = \"factor\",\n                           numeric = \"numeric\"\n                         ),\n                         selected = \"factor\"\n            ),\n            textInput(ns(\"xaxis_textBox\"), \"X axis label\", value = \"x label\"),\n            textInput(ns(\"yaxis_textBox\"), \"Y axis label\", value = \"y label\"),\n            textInput(ns(\"fillBox\"), \"Fill variable\"),\n            textInput(ns(\"legendtitle_fillBox\"), \"Legend title for fill\", value = \"Title fill\"),\n            textInput(ns(\"colBox\"), \"Colour variable\"),\n            textInput(ns(\"legendtitle_colBox\"), \"Legend title for colour\", value = \"Title colour\"),\n            actionButton(ns(\"boxplot\"), \"Create plot\"),\n            selectInput(ns(\"themeBox\"), \"Choose a 'colour' theme\",\n                        c(\n                          \"BuPu\" = \"BuPu\",\n                          \"RdYIBu\" = \"RdYIBu\",\n                          \"Paired\" = \"Paired\",\n                          \"PuOr\" = \"PuOr\",\n                          \"Spectral\" = \"Spectral\",\n                          \"Pastel1\" = \"Pastel1\",\n                          \"hue\" = \"hue\",\n                          \"grey\" = \"grey\"\n                        ),\n                        selectize = FALSE\n            ),\n            selectInput(ns(\"theme_fillBox\"), \"Choose a 'fill' theme\",\n                        c(\n                          \"BuPu\" = \"BuPu\",\n                          \"RdYIBu\" = \"RdYIBu\",\n                          \"Paired\" = \"Paired\",\n                          \"PuOr\" = \"PuOr\",\n                          \"Spectral\" = \"Spectral\",\n                          \"Pastel1\" = \"Pastel1\",\n                          \"hue\" = \"hue\",\n                          \"grey\" = \"grey\"\n                        ),\n                        selectize = FALSE\n            ),\n            radioButtons(ns(\"facet_modeBox\"),\n                         \"Choose Facet Mode:\",\n                         choices = c(\"none\", \"facet_wrap\", \"facet_grid\")\n            ),\n            textInput(ns(\"facetBox\"), \"split plot by\"),\n            width = 24\n          )\n        ),\n        tabPanel(\n          \"Dotplots\",\n          box(\n            textInput(ns(\"yDot\"), \"Y variable\", value = \"y\"),\n            textInput(ns(\"xDot\"), \"X variable\", value = \"x\"),\n            radioButtons(ns(\"xtypeDot\"), \"Type of x\",\n                         choices = c(\n                           factor = \"factor\",\n                           numeric = \"numeric\"\n                         ),\n                         selected = \"factor\"\n            ),\n            textInput(ns(\"xaxis_textDot\"), \"X axis label\", value = \"x label\"),\n            textInput(ns(\"yaxis_textDot\"), \"Y axis label\", value = \"y label\"),\n            textInput(ns(\"colDot\"), \"Colour variable\"),\n            textInput(ns(\"legendtitle_colDot\"), \"Legend title for colour\", value = \"Title colour\"),\n            selectInput(ns(\"fitDot\"), \"Choose a fitting method\",\n                        c(\n                          \"none\" = \"none\",\n                          \"lm\" = \"lm\",\n                          \"glm\" = \"glm\",\n                          \"gam\" = \"gam\",\n                          \"loess\" = \"loess\"\n                        ),\n                        selectize = FALSE\n            ),\n            actionButton(ns(\"dotplot\"), \"Create plot\"),\n            selectInput(ns(\"themeDot\"), \"Choose a colour theme\",\n                        c(\n                          \"BuPu\" = \"BuPu\",\n                          \"RdYIBu\" = \"RdYIBu\",\n                          \"Paired\" = \"Paired\",\n                          \"PuOr\" = \"PuOr\",\n                          \"Spectral\" = \"Spectral\",\n                          \"Pastel1\" = \"Pastel1\",\n                          \"hue\" = \"hue\",\n                          \"grey\" = \"grey\"\n                        ),\n                        selectize = FALSE\n            ),\n            radioButtons(ns(\"facet_modeDot\"),\n                         \"Choose Facet Mode:\",\n                         choices = c(\"none\", \"facet_wrap\", \"facet_grid\")\n            ),\n            textInput(ns(\"facetDot\"), \"split plot by\"),\n            width = 24\n          )\n        ),\n        tabPanel(\n          \"Lineplots\",\n          box(\n            textInput(ns(\"yLine\"), \"Y variable\", value = \"y\"),\n            textInput(ns(\"xLine\"), \"X variable\", value = \"x\"),\n            radioButtons(ns(\"xtypeLine\"), \"Type of x\",\n                         choices = c(\n                           factor = \"factor\",\n                           numeric = \"numeric\"\n                         ),\n                         selected = \"factor\"\n            ),\n            textInput(ns(\"xaxis_textLine\"), \"X axis label\", value = \"x label\"),\n            textInput(ns(\"yaxis_textLine\"), \"Y axis label\", value = \"y label\"),\n            textInput(ns(\"colLine\"), \"Colour variable\"),\n            textInput(ns(\"legendtitle_colLine\"), \"Legend title for colour\", value = \"Title colour\"),\n            selectInput(ns(\"fitLine\"), \"Choose a fitting method\",\n                        c(\n                          \"none\" = \"none\",\n                          \"lm\" = \"lm\",\n                          \"glm\" = \"glm\",\n                          \"gam\" = \"gam\",\n                          \"loess\" = \"loess\"\n                        ),\n                        selectize = FALSE\n            ),\n            actionButton(ns(\"lineplot\"), \"Create plot\"),\n            selectInput(ns(\"themeLine\"), \"Choose a colour theme\",\n                        c(\n                          \"BuPu\" = \"BuPu\",\n                          \"RdYIBu\" = \"RdYIBu\",\n                          \"Paired\" = \"Paired\",\n                          \"PuOr\" = \"PuOr\",\n                          \"Spectral\" = \"Spectral\",\n                          \"Pastel1\" = \"Pastel1\",\n                          \"hue\" = \"hue\",\n                          \"grey\" = \"grey\"\n                        ),\n                        selectize = FALSE\n            ),\n            radioButtons(ns(\"facet_modeLine\"),\n                         \"Choose Facet Mode:\",\n                         choices = c(\"none\", \"facet_wrap\", \"facet_grid\")\n            ),\n            textInput(ns(\"facetLine\"), \"split plot by\"),\n            width = 24\n          )\n        )\n      ),\n      tabBox(\n        tabPanel(\n          \"Save\",\n          box(\n            actionButton(\"plot_save\", \"Add output to result-file\"),\n            textInput(\"plot_file_name\", \"Filename\", value = \"new_file.xlsx\"),\n            downloadButton(\"download_plot\", \"Save results\"),\n            checkboxGroupInput(\"TableSaved2\", \"Saved results to file\", NULL),\n            plotOutput(ns(\"plot_result\")),\n            imageOutput(ns(\"image_result\")),\n            numericInput(ns(\"widthPlot\"), \"Width of plot [cm]\", value = 10),\n            numericInput(ns(\"heightPlot\"), \"Height of plot [cm]\", value = 10),\n            numericInput(ns(\"resPlot\"), \"Resolution of plot\", value = 300),\n            width = 24\n          )\n        )\n      )\n    )\n  )\n}\n\nui <- dashboardPage(\n\n  dashboardHeader(title = \"Biostats\"),\n  dashboardSidebar(\n    useShinyjs(),\n    extendShinyjs(text = jsCode, functions = c(\"geturl\", \"closewindow\")),\n    sidebarMenu(\n      menuItem(\"Data\", tabName = \"data\", icon = icon(\"table\")),\n      menuItem(\"Visualisation\", tabName = \"Visualisation\", icon = icon(\"table\")),\n      menuItem(\"Correlations\", tabName = \"corr\", icon = icon(\"table\")),\n      menuItem(\"Assumptions\", tabName = \"ass\", icon = icon(\"table\")),\n      menuSubItem(\"Statistical tests\", tabName = \"tests\",  icon = icon(\"table\")),\n      menuSubItem(\"LC50\", tabName = \"lc50\",  icon = icon(\"table\")),\n      menuSubItem(\"Documentation\", tabName = \"documentation\",  icon = icon(\"table\"))\n    )\n  ),\n\n    dashboardBody(\n      tabItems(\n        # data & transformation\n        tabItem(\n          tabName = \"data\",\n          DT::DTOutput(\"dat1\"),\n          h3(\"Types of columns\"),\n          box(\n            h5(strong(\"Modify a variable\")),\n            textInput(\"op\", \"Operations\", value = \"var1 + 10\"),\n            textInput(\"new_mod\", \"Name of new variable\", value = \"new\"),\n            actionButton(\"mod\",\"Modify\"),\n            verbatimTextOutput(\"mod_error\"),\n            width = 12\n          ),\n          box(\n            fileInput(\"upload\", \"Upload a file\"),\n            width = 12\n          )\n        ),\n\n        # plotting\n        plotting(\"plotting\"),\n\n        # calculate correlations\n        tabItem(tabName = \"corr\",\n                fluidRow(\n                  box(textInput(\"dep3\", \"Variable Nr.1\", value = \"var1\")  ),\n                  box(textInput(\"indep3\", \"Variable Nr.2\", value = \"var2\") ),\n                  box(\n                    actionButton(\"pear\", \"Pearson correlation\"),\n                    actionButton(\"spear\", \"Spearman correlation\"),\n                    actionButton(\"kendall\", \"Kendall correlation\"),\n                    sliderInput(\"conflevel0\", \"Confidence level of the interval\",\n                                min = 0, max = 1, value = 0.95),\n                    selectInput(\"alt0\", \"Alternative hypothesis\",\n                                c(\"Two sided\" = \"two.sided\",\n                                  \"Less\" = \"less\",\n                                  \"Greater\" = \"greater\")),\n                    h4(strong(\"Results of test:\")),\n                    tableOutput(\"cor_result\"),\n                    verbatimTextOutput(\"cor_error\"),\n                    width = 12\n                  ),\n                box(\n                  actionButton(\"corr_save\", \"Add output to result-file\"),\n                  downloadButton(\"download_corr\", \"Save results\"),\n                  width = 12\n                ),\n                box(\n                  checkboxGroupInput(\"TableSaved\", \"Saved results to file\", NULL),\n                  width = 12\n                )\n                )\n        ),\n\n        # assumptions\n        tabItem(tabName = \"ass\",\n                fluidRow(\n                  box(textInput(\"dep4\", \"dependent variable\", value = \"dep_var\")  ),\n                  box(textInput(\"indep4\", \"independent variable(s)\", value = \"indep_var1 * indep_var2\") ),\n                  box(\n                    actionButton(\"leve\", \"Levene test\",\n                                 style = \"background-color: #2e6da4\"),\n                    actionButton(\"shap\", \"Shapiro test\"),\n\n                    tags$style(\"#center {background-color:#2e6da4;}\"),\n                    selectInput(\"center\", \"Data center of each group: mean or median\",\n                                c(\"Mean\" = \"mean\",\n                                  \"Median\" = \"median\"), selectize = FALSE),\n\n                    h4(strong(\"Results of test:\")),\n                    tableOutput(\"as_result\"),\n                    verbatimTextOutput(\"as_error\"),\n                    width = 12\n                  ),\n                  box(\n                    actionButton(\"ass_save\", \"Add output to result-file\"),\n                    textInput(\"ass_file_name\", \"Filename\", value = \"new_file.xlsx\"),\n                    downloadButton(\"download_ass\", \"Save results\"),\n                    width = 12\n                  ),\n                  box(\n                    checkboxGroupInput(\"TableSaved3\", \"Saved results to file\", NULL),\n                    width = 12\n                  )\n                )\n       ),\n\n      # statistical tests\n      tabItem(tabName = \"tests\",\n              fluidRow(\n                box(textInput(\"dep6\", \"dependent variable\", value = \"dep_var\")  ),\n                box(textInput(\"indep6\", \"independent variable(s)\", value = \"indep_var1 * indep_var2\") ),\n                column(6,\n                  box(\n                    actionButton(\"ttest\", \"t test\"),\n                    sliderInput(\"conflevel\", \"Confidence level of the interval\",\n                                min = 0, max = 1, value = 0.95),\n                    selectInput(\"alt\", \"Alternative hypothesis\",\n                                c(\"Two sided\" = \"two.sided\",\n                                  \"Less\" = \"less\",\n                                  \"Greater\" = \"greater\")),\n                    selectInput(\"paired\", \"Paired or unpaired t-test\",\n                                c(\"Unpaired\" = \"up\",\n                                  \"Paired\" = \"p\")),\n                    selectInput(\"vareq\", \"Are the two variances treated as equal or not?\",\n                                c(\"Equal\" = \"eq\",\n                                  \"Not equal\" = \"noeq\")),\n                    width = 12\n                  )\n                ),\n                column(6,\n                  box(actionButton(\"aov\", \"Anova\"),\n                      actionButton(\"kw\", \"Kruskal Wallis\"),\n                      width = 12\n                  ),\n                  box(\n                    tags$style(\"#padj {background-color:#2e6da4;}\"),\n                    actionButton(\"tuk\", \"Tukey HSD test\"),\n                    actionButton(\"kwposthoc\", \"Kruskal Wallis test & multiple comparison of treatments\",\n                                 style = \"background-color: #2e6da4\"),\n                    actionButton(\"lsd\", \"Least significant difference (LSD) test\",\n                                 style = \"background-color: #2e6da4\"),\n                    actionButton(\"scheffe\", \"Scheffe test\"),\n                    actionButton(\"regw\", \"REGW test\"),\n                    sliderInput(\"pval\", \"P-value\",\n                                min = 0, max = 0.15, value = 0.05),\n                    selectInput(\"bvsub\", \"Design\",\n                                c(\"Balanced\" = \"ba\",\n                                  \"Unbalanced\" = \"ub\") ),\n                    selectInput(\"padj\", \"Adjusted p method\",\n                                c(\"Holm\" = \"holm\",\n                                  \"Hommel\" = \"hommel\",\n                                  \"Hochberg\" = \"hochberg\",\n                                  \"Bonferroni\" = \"bonferroni\",\n                                  \"BH\" = \"BH\",\n                                  \"BY\" = \"BY\",\n                                  \"fdr\" = \"fdr\"), selectize = FALSE ),\n                    \"fdr\" = \"fdr\", width = 12)\n              ),\n\n\n\n              box(h4(strong(\"Results of tests:\")),\n                  tableOutput(\"tests_result\"),\n                  verbatimTextOutput(\"tests_error\"),\n                  width = 12\n              ),\n\n\n              box(\n                actionButton(\"tests_save\", \"Add output to result-file\"),\n                textInput(\"tests_file_name\", \"Filename\", value = \"new_file.xlsx\"),\n                downloadButton(\"download_tests\", \"Save results\"),\n                width = 12\n              ),\n              box(\n                checkboxGroupInput(\"TableSaved4\", \"Saved results to file\", NULL),\n                width = 12\n              )\n\n\n            )\n      ),\n\n\n      # LC50\n      tabItem(tabName = \"lc50\",\n              fluidRow(\n                box(textInput(\"abs\", \"Absorbance\", value = \"abs\")  ),\n                box(textInput(\"names\", \"names of compounds\", value = \"names\") ),\n                box(textInput(\"conc\", \"concentrations\", value = \"conc\") ),\n                box(textInput(\"negative_identifier\", \"How is the negative control labeled\", value = \"neg\") ),\n                box(textInput(\"positive_identifier\", \"How is the positive control labeled\", value = \"pos\") ),\n                box(\n                  actionButton(\"lc50\", \"Calculate LC50\"),\n                  actionButton(\"lc50Plot\", \"Create LC50 plots\"),\n                  h4(strong(\"Results of test:\")),\n                  DT::DTOutput(\"lc50_result\"),\n                  plotOutput(\"lc50_plot\"),\n                  width = 12\n                ),\n                box(\n                  actionButton(\"lc50_save\", \"Add output to result-file\"),\n                  textInput(\"lc50_file_name\", \"Filename\", value = \"new_file.xlsx\"),\n                  downloadButton(\"download_lc50\", \"Save results\"),\n                  width = 12\n                ),\n                box(\n                  checkboxGroupInput(\"TableSaved5\", \"Saved results to file\", NULL),\n                  width = 12\n                )\n              )\n      ),\n\n\n\n      # Documentation\n      # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n      tabItem(tabName = \"documentation\",\n              box(\n            \n            markdown(\"\n            <div style='text-align: justify'>\n\n            ## Raw Data\n              In the *Data* tab the file from the ELN is depicted. In case the download didn't work or the file couldn't be uploaded into R (the programming language used for all tests) a message is printed.\n            <\/div>\"),\n            tableOutput(\"example_csv\"),\n            \n            markdown(\"\n            <div style='text-align: justify'>\n\n            ## Data transformation\n              In case data transformation is required it can be conducted using the forms below the datatable.\n              In the first text field the operations which should be conducted have to be specified. The allowed functions are listed in the table below.\n              To do this the names of the columns can be used as variables.\n              After specifiyng the operation a new name for a column has to be chosen in which the result of the calculation is stored.\n              For more information about the allowed functions check the documentation (https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html).\n              After pressing **Modify** the operations are conducted on each row independently. Below you can see the allowed functions.\n            <\/div>\"),\n            tableOutput(\"allowed_functions\"),\n\n            markdown(\"\n              <div style='text-align: justify'>\n\n              # Plots\n              The tab *Plots* enables the user to visualize data. Therefore, a x and y variable have to be specified. Additionally, it is possible among other paramters to add a colour variable.\n              This variable is used to group the data. Moreover, three different plots: Boxplots, Dotplots and Lineplots can be generated.\n              An example can be seen below. Here the variables are defined as the following: **x = Plant**, **y = uptake** and **colour variable = Treatment**.\n              <\/div>\n              \"),\n\n            plotOutput(\"example_plot\"),\n\n            markdown(\"\n              <div style='text-align: justify'>\n\n              ## Statistical tests\n              The different statistical tests can be found in the tab *Correlations*, *Assumptions* and *Statistical tests*.\n              Within the tab **Correlations** it is possible to check the association between paired samples.\n              Three different correlation tests **Pearson**, **Spearman** and **Kendall** can be used.\n              Furthermore, the **Confidence level of the interval** can be specified in a range from 0 to 1. The start value is set to 0.95.\n              Beyond that the **Alternative hypothesis** can be chosen between **Two sided**, **Less** and **Greater**. The default is set to **Two sided**.\n              For instance (see below), one could calculate the correlation between **uptake** and **conc** of the table above.  To do this one has to write **uptake** in the first text field and **conc** in the second one.\n              After pressing **Pearson correlation** the result is shown below. The first value **estimate** is the correlation coefficient.\n              The second value **statistic** is the t-test statistic value. Next the **p-value** indicates whether it is significant or not.\n              The value **parameter** defines the degrees of freedom. Finally, the last two values are the lower and upper boundary of the 95% confidence interval of the correlation coefficient.\n              <\/div>\"),\n\n            tableOutput(\"example_cortest\"),\n\n            markdown(\"\n              <div style='text-align: justify'>\n\n              ## Defining formulas\n              For each statistical test except the **shapiro test** the dependent and independent variable(s) have to follow the R syntax for **formulas**.\n              Therefore, in the next paragraph the syntax for the tests is explained.\n              If only one variable is used as independent variable then it is enough to state the name of the column in the according text field.\n              The different terms of the model are seperated using the **+** sign. The terms themselves consist of variable and factor names separated by **:**.\n              This is interpreted as the interaction of all variables and factors within the specific term.\n              If one wants to examine interactions (factor crossing) one can write **a\\\\*b**. Alternatively one can write **a + b + a:b**.\n              Furthermore, the operator **^** indicates crossing to the specified degree. For instance, **(a + b)^2** is the same as **(a + b)*(a + b)**.\n              Moreover, the operator **%in%** indicates that the term at the left are nested within those of the right. For example, **a + b %in% a** is the same as **a + a:b**.\n              The **/** operator is a shorthand. Thus **a / b** is the same as **a + b %in% a**.\n              Finally, the operator **-** removes the specified term from the model. For instance, **(a + b + c)^2 - a:b** is the same as **a + b + c + b:c + a:c**.\n              For more information check the documentation (https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html).\n              ## Check assumptions\n              It is possible to check assumptions for tests such as the anova. The variance homogenity can be checked with the **Levene test**.\n              Therefore one has to specify the dependent variable and the independent variable(s).\n              For instance (see below) the **Levene test** is conducted for the dependent variable **uptake** and the independent variable **Plant**.\n              As you can see the p-value is above 0.05 thus one would assume equal variances.\n              <\/div>\"),\n\n            tableOutput(\"example_levene\"),\n\n            markdown(\"\n              <div style='text-align: justify'>\n\n              Moreover, the **Shapiro test** can be used to test whether the data is normal distributed.\n              In contrast to the other tests it is required to combine the independent variables in a comma separated way.\n              For instance conducting the shapiro test for the dependent variable **uptake** one has to write the variable **'uptake'** in the corresponding text field.\n              Assuming that later the interaction between **Plant** and **Type** one has to type **Plant, Type** into the text field describing the independent variables.\n              The results are depicted below. As you can see the p-value is smaller then 0.05 for the first group meaning that the data is not normally distributed.\n              In contrast the group **Mississippi.MC2** is normally distributed as the p-value (0.15) is larger then 0.05.\n              <\/div>\"),\n\n            tableOutput(\"example_shapiro\"),\n\n            markdown(\"\n              <div style='text-align: justify'>\n\n              ## Compare 2 groups\n              To compare two groups with each other a **t-test** can be used. Which follows the usual syntax for dependent and independent variable (see above).\n              Several parameters can be set for the test. First of all the **Confidence level of the interval** can be set. The default is 0.95.\n              Moreover, the **Alternative hypothesis** can be changed. The default is **Two sided**. Alternatively one can chose **Less** and **Greater**.\n              Furthermore, it is required to decide between an unpaired and paired t-test. The default is set to unpaired.\n              The last option which is available is the question whether the variances are equal or not. The default is set to equal.\n              Below you see the result for the dependent variable **uptake** and the independent variable **Type**. **Parameter** indicates are the number of degrees aof freedom.\n              The p-value is belwo 0.05 thus there is a significant difference between the two groups. For more information see http://www.sthda.com/english/wiki/paired-samples-t-test-in-r.\n              <\/div>\n              \"),\n\n            tableOutput(\"example_ttest\"),\n\n            markdown(\"\n              <div style='text-align: justify'>\n\n              ## Compare more than 2 groups\n              If you want to compare more than two groups you have to state the dependent and independt variable in the same way as for the Levene or t-test.\n              The Anova can be used if the assumptions for normaility and variance homogentiy are met.\n              In case the assumptions are not met even after data transformation one can conduct the Kruskal Wallis test.\n              However, in this case only one independent variable is allowed. In case someone want to compare more groups one can combine them in the *data* tab. \\\n              After Anova or Kruskal Wallis test PostHoc tests can be conducted.\n              The Tukey HSD, LSD-test, Scheffe-test and the REGW-test calculate an Anova in advance to the PostHOC test.\n              In contrast the other PostHoc tests (Kurskal Wallis test & multiple comparison treatment) performs independently.\n              Moreover, can the p-value be set as threshold for significance. The default is set to 0.05.\n              Furthermore, are different methods for adjusting the p-value in case of using the **Kruskal Wallis test & multiple comparison of treatments** and **LSD-test**.\n              The default of the correction is set to **Holm**.\n              For example an anova is conducted with the dependent variable **uptake** and the independent term: **Plant** the results are shown below.\n              As one can see there is a significant difference for **Treatment** and **Type**. However, the interaction is not significant.\n              Afterwards, a TukeyHSD is conducted. Which explicitly shows which groups differ from each offer. The information for **Treatment**, **Type** and are shown as they are included in the **Plant** variable.\n              <\/div>\n              \"),\n\n            tableOutput(\"example_aov\"),\n            tableOutput(\"example_tukey\"),\n\n            width = 12\n              ),\n\n            height = 12\n      )\n\n\n\n\n    )\n\n  )\n)\n","type":"text"},{"name":"TestApp/app.R","content":"library(shiny)\nlibrary(DT)\n\nui <- fluidPage(\n    titlePanel(\"Old Faithful Geyser Data\"),\n    sidebarLayout(\n        sidebarPanel(\n          fileInput(\"upload\", NULL, buttonLabel = \"Upload...\", multiple = TRUE),\n          sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n        mainPanel(\n           plotOutput(\"distPlot\"),\n           DT::DTOutput(\"df\")\n        )\n    )\n)\n\nserver <- function(input, output) {\n    output$distPlot <- renderPlot({\n        x    <- faithful[, 2]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n    \n    output$df <- renderDT({\n      req(input$upload)\n      df <- read.csv(input$upload$datapath, header = TRUE) \n      if (is.data.frame(df)) {\n      } else {\n        showNotification(\"File can not be used. Upload into R failed!\", duration = 0)\n      }\n      return(df)\n    })\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"check_ast.R","content":"get_ast <- function(inp) {\n  if (!is.call(inp)) {\n    return(inp)\n  }\n\n  inp <- as.list(inp)\n\n  # check if is function\n  fct <- inp[[1]]\n\n  allowed_fcts <- c(\n    \"-\", \"+\", \"*\", \"/\",\n    \"log\", \"log10\", \"sqrt\", \"exp\", \"^\",\n    \"sin\", \"cos\", \"tan\", \"tanh\", \"sinh\", \"cosh\", \"acos\", \"asin\", \"atan\",\n    \"is.numeric\", \"is.character\", \"is.logical\", \"is.factor\", \"is.integer\",\n    \"as.numeric\", \"as.character\", \"as.logical\", \"as.factor\", \"as.integer\",\n    \">\", \"<\", \"<=\", \">=\", \"==\", \"!=\",\n    \"abs\", \"ceiling\", \"floor\", \"trunc\", \"round\",\n    \"grep\", \"substr\", \"sub\", \"paste\", \"paste0\",\n    \"strsplit\", \"tolower\", \"toupper\",\n    \"dnorm\", \"pnorm\", \"qnorm\", \"rnorm\", \"dbinom\",\n    \"pbinom\", \"qbinom\", \"rbinom\", \"dpois\",\n    \"ppois\", \"rpois\", \"dunif\", \"punif\", \"qunif\", \"runif\",\n    \"mean\", \"sd\", \"median\", \"quantile\", \"range\",\n    \"sum\", \"diff\", \"min\", \"max\", \"scale\",\n    \"c\", \"vector\", \"length\", \"matrix\"\n  )\n\n  check <- deparse(fct)\n\n  if ((check %in% allowed_fcts) == FALSE) {\n    return(\"Error\")\n  }\n\n  lapply(inp, get_ast)\n}\n","type":"text"},{"name":"server/plotting.R","content":"plotting <- function(id, var, result, res, plot_res) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      plot_res <- reactiveValues(data = NULL)\n      \n      plotfct <- function(method) {\n            df <- var$df\n            req(df)\n            x <- NULL\n            y <- NULL\n            col <- \"\"\n            fill <- \"\"\n            fill_title <- \"\"\n            col_title <- \"\"\n            xlabel <- \"\"\n            ylabel <- \"\"\n            xtype <- NULL\n            theme <- NULL\n            theme_fill <- NULL\n            facet_mode <- NULL\n            facet <- NULL\n            fitMethod <- NULL\n            width <- input$widthPlot\n            height <- input$heightPlot\n            resolution <- input$resPlot\n            if(width <= 0) {\n              showNotification(paste(\"width has to be a positive number is changed to 10 cm\"), duration = 0)\n              width <- 10\n            }\n            if(height <= 0) {\n              showNotification(paste(\"height has to be a positive number is changed to 10 cm\"), duration = 0)\n              height <- 10\n            }\n            if(width > 100) {\n              showNotification(paste(\"width exceeds max value of 100 cm. Is set to 100 cm.\"), duration = 0)\n              width <- 100\n            }\n            if(height > 100) {\n              showNotification(paste(\"height exceeds max value of 100 cm. Is set to 100 cm.\"), duration = 0)\n              height <- 100\n            }\n\n            if(method == \"box\") {\n              x <- input$xBox\n              y <- input$yBox\n              col <- input$colBox\n              fill <- input$fillBox\n              fill_title <- input$legendtitle_colBox\n              col_title <- input$legendtitle_fillBox\n              xlabel <- input$xaxis_textBox\n              ylabel <- input$yaxis_textBox\n              xtype <- input$xtypeBox\n              theme <- input$themeBox\n              theme_fill <- input$theme_fillBox\n              facet_mode <- input$facet_modeBox \n              facet <- input$facetBox\n            } else if(method == \"dot\") {\n              x <- input$xDot\n              y <- input$yDot\n              col <- input$colDot\n              col_title <- input$legendtitle_colDot\n              xlabel <- input$xaxis_textDot\n              ylabel <- input$yaxis_textDot\n              xtype <- input$xtypeDot\n              theme <- input$themeDot\n              facet_mode <- input$facet_modeDot\n              facet <- input$facetDot\n              fitMethod <- input$fitDot\n            } else if(method == \"line\") {\n              x <- input$xLine\n              y <- input$yLine\n              col <- input$colLine\n              col_title <- input$legendtitle_colLine\n              xlabel <- input$xaxis_textLine\n              ylabel <- input$yaxis_textLine\n              xtype <- input$xtypeLine\n              theme <- input$themeLine\n              facet_mode <- input$facet_modeLine\n              facet <- input$facetLine\n            }\n            if(is.null(x)) showNotification(\"please specify the X variable\", duration = 0)\n            if(is.null(y)) showNotification(\"please specify the Y variable\", duration = 0) \n            req(!is.null(x))\n            req(!is.null(y))\n            col_names <- names(df)\n            check_x <- x %in% col_names\n            check_y <- y %in% col_names\n            if(!check_x) showNotification(\"X variable not found\", duration = 0)\n            if(!check_y) showNotification(\"Y variable not found\", duration = 0) \n            req(check_x)\n            req(check_y)\n            if( !(fill %in% names(df)) && (fill != \"\") ) showNotification(\"fill variable not found\", duration = 0)\n            if( !(col %in% names(df)) && (fill != \"\") ) showNotification(\"colour variable not found\", duration = 0)\n            req( (fill %in% names(df)) || (fill == \"\") )\n            req( (col %in% names(df)) || (col == \"\") )\n\n            xd <- NULL\n            if(xtype == \"numeric\") {\n              xd <- as.numeric(df[,x])\n            } else {\n              xd <- as.factor(df[,x])\n            }\n            yd <- as.numeric(df[,y])\n\n            if(fitMethod != \"none\" && !is.null(fitMethod) && xtype != \"numeric\") {\n              #fitMethod <- \"none\"\n              showNotification(\"Fit method will be ignored as X variable is not numerical\", duration = 0)\n            }\n            pfct <- function() {\n                if( (fill == \"\") && (col == \"\")) {\n                    p <- ggplot(data = df, aes(x = xd, y = yd)) +\n                          ylab(ylabel) +\n                          xlab(xlabel)  \n                } else if((fill != \"\") && (col != \"\") ) {\n                    p <- ggplot(data = df,\n                          aes(x = xd, y = yd,\n                          fill = df[,fill], color = df[,col]) ) +\n                          ylab(ylabel) +\n                          xlab(xlabel) +\n                          guides(fill = guide_legend(title = fill_title), col = guide_legend(title = col_title))       \n                } else if( (fill != \"\") && (col == \"\") ) {\n                  p <- ggplot(data = df,\n                              aes(x = xd, y = yd,\n                              fill = df[,fill]) ) +\n                    ylab(ylabel) +\n                    xlab(xlabel) +\n                    guides(fill = guide_legend(title = fill_title) )\n                } else if( (fill == \"\") && (col != \"\") ) {\n                  p <- ggplot(data = df,\n                              aes(x = xd, y = yd,\n                              color = df[,col]) ) +\n                    ylab(ylabel) +\n                    xlab(xlabel) +\n                    guides(col = guide_legend(title = col_title) )\n                }\n                if(method == \"box\") {\n                  p <- p +\n                    scale_color_brewer(palette = theme) +\n                    scale_fill_brewer(palette = theme_fill)\n                    p <- p + geom_boxplot()\n                } else if(method == \"dot\") {\n                  p <- p +\n                    scale_color_brewer(palette = theme) \n                  p <- p + geom_point() +   geom_smooth(method = fitMethod) \n                  if(fitMethod != \"\" && !is.null(fitMethod) && fitMethod != \"none\") p <- p + stat_poly_eq(ggpmisc::use_label(c(\"eq\", \"n\", \"R2\", \"p\", \"F\"))) \n                } else if(method == \"line\") {\n                  p <- p +\n                    scale_color_brewer(palette = theme) \n                    p <- p + geom_line()\n                }  \n                if(facet_mode == \"facet_wrap\") {\n                  p <- p + facet_wrap(~ df[,facet], scales = \"free\")\n                } else if(facet_mode == \"facet_grid\") {\n                  p <- p + facet_grid(. ~  df[,facet], scales = \"free\")\n                }\n                \n                return(p)\n            }\n            p <- tryCatch({\n              p <- pfct()\n            }, \n            warning = function(warn) {\n                  showNotification(paste(\"A warning occurred: \", conditionMessage(warn)), duration = 0)\n            }, \n            error = function(err) {\n                  showNotification(paste(\"An error occurred: \", conditionMessage(err)), duration = 0)\n            })\n            result$d <- plotResult$new(p, width, height, resolution)\n            plot_res$data <- p\n            result$curr_name <- paste(\"Plot Nr\", length(result$names) + 1,  paste(\"Type: \", method))\n            output$plot_res <- renderPlot(p)\n    }\n\n      observeEvent(input$boxplot, {\n        plotfct(\"box\")\n      })\n\n      observeEvent(input$dotplot, {\n        plotfct(\"dot\")\n      })\n\n      observeEvent(input$lineplot, {\n        plotfct(\"line\")\n      })\n\n      output$plot_result <- renderPlot({\n        plot_res$data\n      })\n\n\n      }\n  )\n}\n\n\n","type":"text"},{"name":"server/readData.R","content":"upload <- function(path) {\n  req(is.character(path))\n  df <- NULL\n    df <- try( as.data.frame(read_excel(path, col_names = TRUE)), silent = TRUE)\n  if (class(df) == \"try-error\") {\n    # identify seperator\n    line <- readLines(path, n = 1)\n    semicolon <- grepl(\";\", line)\n    comma <- grepl(\",\", line)\n    tab <- grepl(\"\\t\", line)\n    seperator <- NULL\n    if (semicolon == TRUE) {\n      seperator <- \";\"\n    } else if (comma == TRUE) {\n      seperator <- \",\"\n    } else if (tab == TRUE) {\n      seperator <- \"\\t\"\n    } else {\n      return(\"error\")\n    }\n    df <- try(read.csv(path, header = TRUE, sep = seperator))\n    if (class(df) == \"try-error\") {\n      return(\"error\")\n    }\n  } else {\n    f <- function(x) {\n      options(warn = -1)\n      x <- as.numeric(x)\n      options(warn = 0)\n      x <- x[!is.na(x)]\n      length(x) > 0\n    }\n    check <- apply(df, 2, f)\n    conv <- function(a, b) {\n      if (a == TRUE) {\n        return(as.numeric(b))\n      }\n      return(b)\n    }\n    df <- Map(conv, check, df)\n    df <- data.frame(df)\n  }\n  return(df)\n}\n","type":"text"},{"name":"test.R","content":"shinylive::export(\"BiostatsGithubPage/TestApp\", \"site\")\nhttpuv::runStaticServer(\"site\")\n\nshinylive::export(\"BiostatsGithubPage\", \"site\")\nhttpuv::runStaticServer(\"site\")\n","type":"text"},{"name":"ui/plotting.R","content":"plotting <- function(id) {\n  ns <- NS(id)\n  tabItem(\n    tabName = \"Visualisation\",\n    fluidRow(\n      tabBox(\n        tabPanel(\n          \"Boxplots\",\n          box(\n            textInput(ns(\"yBox\"), \"Y variable\", value = \"y\"),\n            textInput(ns(\"xBox\"), \"X variable\", value = \"x\"),\n            radioButtons(ns(\"xtypeBox\"), \"Type of x\",\n              choices = c(\n                factor = \"factor\",\n                numeric = \"numeric\"\n              ),\n              selected = \"factor\"\n            ),\n            textInput(ns(\"xaxis_textBox\"), \"X axis label\", value = \"x label\"),\n            textInput(ns(\"yaxis_textBox\"), \"Y axis label\", value = \"y label\"),\n            textInput(ns(\"fillBox\"), \"Fill variable\"),\n            textInput(ns(\"legendtitle_fillBox\"), \"Legend title for fill\", value = \"Title fill\"),\n            textInput(ns(\"colBox\"), \"Colour variable\"),\n            textInput(ns(\"legendtitle_colBox\"), \"Legend title for colour\", value = \"Title colour\"),\n            actionButton(ns(\"boxplot\"), \"Create plot\"),\n            selectInput(ns(\"themeBox\"), \"Choose a 'colour' theme\",\n              c(\n                \"BuPu\" = \"BuPu\",\n                \"RdYIBu\" = \"RdYIBu\",\n                \"Paired\" = \"Paired\",\n                \"PuOr\" = \"PuOr\",\n                \"Spectral\" = \"Spectral\",\n                \"Pastel1\" = \"Pastel1\",\n                \"hue\" = \"hue\",\n                \"grey\" = \"grey\"\n              ),\n              selectize = FALSE\n            ),\n            selectInput(ns(\"theme_fillBox\"), \"Choose a 'fill' theme\",\n              c(\n                \"BuPu\" = \"BuPu\",\n                \"RdYIBu\" = \"RdYIBu\",\n                \"Paired\" = \"Paired\",\n                \"PuOr\" = \"PuOr\",\n                \"Spectral\" = \"Spectral\",\n                \"Pastel1\" = \"Pastel1\",\n                \"hue\" = \"hue\",\n                \"grey\" = \"grey\"\n              ),\n              selectize = FALSE\n            ),\n            radioButtons(ns(\"facet_modeBox\"),\n              \"Choose Facet Mode:\",\n              choices = c(\"none\", \"facet_wrap\", \"facet_grid\")\n            ),\n            textInput(ns(\"facetBox\"), \"split plot by\"),\n            width = 24\n          )\n        ),\n        tabPanel(\n          \"Dotplots\",\n          box(\n            textInput(ns(\"yDot\"), \"Y variable\", value = \"y\"),\n            textInput(ns(\"xDot\"), \"X variable\", value = \"x\"),\n            radioButtons(ns(\"xtypeDot\"), \"Type of x\",\n              choices = c(\n                factor = \"factor\",\n                numeric = \"numeric\"\n              ),\n              selected = \"factor\"\n            ),\n            textInput(ns(\"xaxis_textDot\"), \"X axis label\", value = \"x label\"),\n            textInput(ns(\"yaxis_textDot\"), \"Y axis label\", value = \"y label\"),\n            textInput(ns(\"colDot\"), \"Colour variable\"),\n            textInput(ns(\"legendtitle_colDot\"), \"Legend title for colour\", value = \"Title colour\"),\n            selectInput(ns(\"fitDot\"), \"Choose a fitting method\",\n              c(\n                \"none\" = \"none\",\n                \"lm\" = \"lm\",\n                \"glm\" = \"glm\",\n                \"gam\" = \"gam\",\n                \"loess\" = \"loess\"\n              ),\n              selectize = FALSE\n            ),\n            actionButton(ns(\"dotplot\"), \"Create plot\"),\n            selectInput(ns(\"themeDot\"), \"Choose a colour theme\",\n              c(\n                \"BuPu\" = \"BuPu\",\n                \"RdYIBu\" = \"RdYIBu\",\n                \"Paired\" = \"Paired\",\n                \"PuOr\" = \"PuOr\",\n                \"Spectral\" = \"Spectral\",\n                \"Pastel1\" = \"Pastel1\",\n                \"hue\" = \"hue\",\n                \"grey\" = \"grey\"\n              ),\n              selectize = FALSE\n            ),\n            radioButtons(ns(\"facet_modeDot\"),\n              \"Choose Facet Mode:\",\n              choices = c(\"none\", \"facet_wrap\", \"facet_grid\")\n            ),\n            textInput(ns(\"facetDot\"), \"split plot by\"),\n            width = 24\n          )\n        ),\n        tabPanel(\n          \"Lineplots\",\n          box(\n            textInput(ns(\"yLine\"), \"Y variable\", value = \"y\"),\n            textInput(ns(\"xLine\"), \"X variable\", value = \"x\"),\n            radioButtons(ns(\"xtypeLine\"), \"Type of x\",\n              choices = c(\n                factor = \"factor\",\n                numeric = \"numeric\"\n              ),\n              selected = \"factor\"\n            ),\n            textInput(ns(\"xaxis_textLine\"), \"X axis label\", value = \"x label\"),\n            textInput(ns(\"yaxis_textLine\"), \"Y axis label\", value = \"y label\"),\n            textInput(ns(\"colLine\"), \"Colour variable\"),\n            textInput(ns(\"legendtitle_colLine\"), \"Legend title for colour\", value = \"Title colour\"),\n            selectInput(ns(\"fitLine\"), \"Choose a fitting method\",\n              c(\n                \"none\" = \"none\",\n                \"lm\" = \"lm\",\n                \"glm\" = \"glm\",\n                \"gam\" = \"gam\",\n                \"loess\" = \"loess\"\n              ),\n              selectize = FALSE\n            ),\n            actionButton(ns(\"lineplot\"), \"Create plot\"),\n            selectInput(ns(\"themeLine\"), \"Choose a colour theme\",\n              c(\n                \"BuPu\" = \"BuPu\",\n                \"RdYIBu\" = \"RdYIBu\",\n                \"Paired\" = \"Paired\",\n                \"PuOr\" = \"PuOr\",\n                \"Spectral\" = \"Spectral\",\n                \"Pastel1\" = \"Pastel1\",\n                \"hue\" = \"hue\",\n                \"grey\" = \"grey\"\n              ),\n              selectize = FALSE\n            ),\n            radioButtons(ns(\"facet_modeLine\"),\n              \"Choose Facet Mode:\",\n              choices = c(\"none\", \"facet_wrap\", \"facet_grid\")\n            ),\n            textInput(ns(\"facetLine\"), \"split plot by\"),\n            width = 24\n          )\n        )\n      ),\n      tabBox(\n        tabPanel(\n          \"Save\",\n          box(\n            actionButton(\"plot_save\", \"Add output to result-file\"),\n            textInput(\"plot_file_name\", \"Filename\", value = \"new_file.xlsx\"),\n            downloadButton(\"download_plot\", \"Save results\"),\n            checkboxGroupInput(\"TableSaved2\", \"Saved results to file\", NULL),\n            plotOutput(ns(\"plot_result\")),\n            imageOutput(ns(\"image_result\")),\n            numericInput(ns(\"widthPlot\"), \"Width of plot [cm]\", value = 10),\n            numericInput(ns(\"heightPlot\"), \"Height of plot [cm]\", value = 10),\n            numericInput(ns(\"resPlot\"), \"Resolution of plot\", value = 300),\n            width = 24\n          )\n        )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"utils.R","content":"plotResult <- R6Class(\"plotResult\",\n  public = list(\n    obj = NULL,\n    width = NULL,\n    height = NULL,\n    dpi = NULL,\n    initialize = function(object, width = 10, height = 10, dpi = 300) {\n      self$obj <- object\n      self$width <- width\n      self$height <- height\n      self$dpi <- dpi\n    }\n  )\n)\n\nerrorClass <- R6Class(\"errorClass\",\n  public = list(\n    error_message = NULL,\n    initialize = function(error_message = NULL) {\n      self$error_message <- error_message\n    },\n    isNull = function() {\n      if (is.null(self$error_message)) {\n        return(TRUE)\n      }\n      return(FALSE)\n    }\n  )\n)\n\n","type":"text"}]
